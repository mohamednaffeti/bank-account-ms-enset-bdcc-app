spring.application.name=account-service
server.port=8082
spring.config.import=optional:configserver:${CONFIG_SERVICE_URL:http://localhost:9999}

##circuit breaker
management.health.circuitbreakers.enabled=true
management.endpoint.health.show-details=always
resilience4j.circuitbreaker.instances.CustomerServiceCB.register-health-indicator=true


# Configuration du Retry
# Définit le nombre maximal de tentatives de retry avant d'abandonner (ici 3 tentatives)
resilience4j.retry.instances.CustomerServiceRetry.maxAttempts=3

# Définit la durée d'attente entre chaque tentative de retry (ici 2 secondes)
resilience4j.retry.instances.CustomerServiceRetry.waitDuration=2s

# Active le backoff exponentiel, ce qui augmente la durée d'attente entre chaque tentative de retry
resilience4j.retry.instances.CustomerServiceRetry.enableExponentialBackoff=true

# Configuration du Circuit Breaker
# Définit le seuil de taux d'échec (ici 50%) au-delà duquel le Circuit Breaker passe à l'état "ouvert"
resilience4j.circuitbreaker.instances.CustomerServiceCB.failureRateThreshold=50

# Définit le nombre total d'appels (ici 10) à surveiller pour calculer le taux d'échec
resilience4j.circuitbreaker.instances.CustomerServiceCB.slidingWindowSize=10

# Définit le nombre d'appels permis (ici 3) avant que le Circuit Breaker décide de revenir à l'état "ouvert" ou "fermé" pendant l'état "half-open"
resilience4j.circuitbreaker.instances.CustomerServiceCB.permittedNumberOfCallsInHalfOpenState=3

# Temps que le Circuit Breaker restera dans l'état "ouvert" avant de tenter de revenir à l'état "half-open" (ici 30 secondes)
resilience4j.circuitbreaker.instances.CustomerServiceCB.waitDurationInOpenState=10s

# Enregistre le Circuit Breaker comme un indicateur de santé, permettant de vérifier son état via les points de terminaison de santé

# Configuration de Spring Cache
# Utiliser un cache simple en memoire, pour les tests
spring.cache.type=simple

# Configuration de Redis
#spring.cache.type=simple
#spring.data.redis.host=redis
#spring.data.redis.port=6379